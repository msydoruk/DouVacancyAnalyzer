// <auto-generated />
using System;
using DouVacancyAnalyzer.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DouVacancyAnalyzer.Migrations
{
    [DbContext(typeof(VacancyDbContext))]
    [Migration("20250929170000_AddDetectedYearsOfExperience")]
    partial class AddDetectedYearsOfExperience
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("DouVacancyAnalyzer.Models.VacancyCountHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveVacancies")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeactivatedVacancies")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MatchPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("MatchingVacancies")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NewVacancies")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalVacancies")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CheckDate");

                    b.ToTable("VacancyCountHistory");
                });

            modelBuilder.Entity("DouVacancyAnalyzer.Models.VacancyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnalysisReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DetectedEnglishLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DetectedExperienceLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DetectedYearsOfExperience")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetectedTechnologies")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("HasAcceptableEnglish")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasNoTimeTracker")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsBackendSuitable")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsMiddleLevel")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsModernStack")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNew")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRemote")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastAnalyzedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MatchScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("VacancyCategory")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsNew");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.HasIndex("CreatedAt", "IsNew", "IsActive");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("DouVacancyAnalyzer.Models.VacancyResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasResponded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VacancyTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("VacancyUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HasResponded");

                    b.HasIndex("VacancyUrl")
                        .IsUnique();

                    b.ToTable("VacancyResponses");
                });
#pragma warning restore 612, 618
        }
    }
}